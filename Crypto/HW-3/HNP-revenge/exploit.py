from pwn import remote, process, success, args
from random import randint
from Crypto.Util.number import long_to_bytes, bytes_to_long
from hashlib import sha256, md5
from ecdsa import SECP256k1
from ecdsa.ecdsa import Public_key, Private_key, Signature
from sage.all import *

E = SECP256k1
G = E.generator
n = Integer(E.order)
Fn = GF(n)

hK = md5(b'secret').hexdigest()
K = 0x10**len(hK)
# K = isqrt(n)
hK = int(hK + '0'*len(hK), 16)

def exploit():
    # print('d', int(io.readline()))

    def send(h):
        io.sendlineafter(b't\n', b'1')
        io.sendlineafter(b'?\n', h)
        # k = int(io.readline())
        # print('k', k-hK)
        r,s = map(Fn, io.readline().strip()[1:-1].split(b','))
        return r,s

    x,y = map(int, io.readline().strip().split(b' = ')[1][1:-1].split(b','))

    m1 = b'owo'
    h1 = bytes_to_long(sha256(m1).digest())
    r1,s1 = send(m1)

    m2 = b'meow'
    h2 = bytes_to_long(sha256(m2).digest())
    r2,s2 = send(m2)

    t = -ZZ(r1/s1 * s2/r2)
    u = r1/s1*h2/r2 - h1/s1 + hK * (t+1)

    L = matrix(ZZ, [
        [n, 0, 0],
        [t, 1, 0],
        [u, 0, K],
    ])

    found = False
    M = L.LLL()
    for v in M:
        if v[2] == K and v[0] < 0 and v[1] > 0:
            k1 = -v[0]
            k2 = v[1]
            found = True

    if not found:
        return False

    print('k1', k1)
    print('k2', k2)

    k1 += hK
    k2 += hK
    if ZZ(r1) != (k1*G).x():
        return False

    # s1 = (h1 + d * r1) / k1
    # s1*k1 = h1 + d * r1
    # d = (s1 * k1 - h1) / r1
    d = ZZ((s1 * k1 - h1) / r1)
    print('d', d)

    pubkey = Public_key(G, d*G)
    prikey = Private_key(pubkey, d)
    assert pubkey.point.x() == x and pubkey.point.y() == y

    msg = b'Kuruwa'
    k = randint(1, n)
    h = sha256(msg).digest()
    sig = prikey.sign(bytes_to_long(h), k)

    io.sendlineafter(b't\n', b'2')
    io.sendlineafter(b': ', msg)
    io.sendlineafter(b': ', str(sig.r).encode())
    io.sendlineafter(b': ', str(sig.s).encode())

    flag = io.readline().decode()
    success(flag)

    return True

while True:
    if args.REMOTE:
        io = remote('edu-ctf.csie.org', 42074)
    else:
        io = process(['python3', 'server.py'])

    if exploit():
        break

    io.close()
