from pwn import *
from sage.all import *
HOST, PORT = 'edu-ctf.csie.org', 42069

if args.REMOTE:
    io = remote(HOST, PORT)
else:
    io = process(['python3', 'server.py'])
    # print(io.readline())

poly = Integer(0xaa0d3a677e1be0bf)

class LFSR:
    def __init__(self, state, poly):
        self._s = state
        self._p = poly
    def _clock(self):
        out = self._s & 1
        self._s >>= 1
        if out:
            self._s ^= self._p
        return out
    def getbit(self):
        for _ in range(42):
            self._clock()
        return self._clock()

taps = poly.bits()
sz = len(taps)

taps = [1] + taps
if 0:
    exec(preparse('F.<x> = PolynomialRing(GF(2))'))
    P = sum(pow(x,sz-r) for r,v in enumerate(taps) if int(v))
    C = companion_matrix(P, format='left')
else:
    taps = list(map(GF(2), taps))
    C = companion_matrix(taps[::-1], format='left')

# print(P)
# print(taps[::-1])
# print(len(list(C)), len(C[0]))
# print('\n'.join(''.join(str(x) for x in y) for y in C))
# print(C[0])

m = []
for i in range(sz):
    m.append((C**((i+1)*43-1))[0])
m = Matrix(m)
# print(m)

io.send(b'0\n' * sz)

money = 1.2
stats = []
while len(stats) < sz:
    io.readuntil('> ')
    n = float(io.readline())
    stats.append(int(n < money))
    money = n

init = m.inverse() * vector(stats)
init = init[::-1]
init = int(''.join(map(str,init)),2)

lfsr = LFSR(init, poly)
for _ in stats:
    lfsr.getbit()

k = int((2.4 - money) / 0.02 + 5)
ary = [lfsr.getbit() for _ in range(k)]

io.sendline('\n'.join(map(str,ary)).encode())

io.readuntil('flag:\n')
flag = io.readline().decode()
success(flag)

# io.interactive()
