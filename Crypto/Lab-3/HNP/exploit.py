from pwn import *
from random import randint
from Crypto.Util.number import *
from hashlib import sha256
from ecdsa import SECP256k1
from ecdsa.ecdsa import Public_key, Private_key, Signature

E = SECP256k1
G, n = E.generator, E.order

if args.REMOTE:
    io = remote('edu-ctf.csie.org', 42072)
else:
    io = process(['python3', 'server.py'])

x,y = map(int,io.readline().strip().split(b' = ')[1][1:-1].split(b','))

msg = b'owo'

io.sendlineafter(b't\n', b'1')
io.sendlineafter(b'?\n', msg)
r1,s1 = map(int,io.readline().strip().split(b' = ')[1][1:-1].split(b','))

io.sendlineafter(b't\n', b'1')
io.sendlineafter(b'?\n', msg)
r2,s2 = map(int,io.readline().strip().split(b' = ')[1][1:-1].split(b','))

'''
1337*k = (is1*H + d(is1*r1)) * 1337
1337*k = is2*H + d(is2*r2)
is1*H*1337 + d(is1*r1*1337) = is2*H + d(is2*r2)
d (is1*r1*1337 - is2*r2) = is2*H - is1*H*1337
d = (is2*H - is1*H*1337) / (is1*r1*1337 - is2*r2)
'''

is1 = pow(s1,-1,n)
is2 = pow(s2,-1,n)
H = bytes_to_long(sha256(msg).digest())

d = (is2*H-is1*H*1337) * pow(is1*r1*1337-is2*r2,-1,n) % n
pubkey = Public_key(G, d*G)
prikey = Private_key(pubkey, d)
assert pubkey.point.x() == x and pubkey.point.y() == y

msg = b'Kuruwa'
k = randint(1, n)
h = sha256(msg).digest()
sig = prikey.sign(bytes_to_long(h), k)

io.sendlineafter(b't\n', b'2')
io.sendlineafter(b': ', msg)
io.sendlineafter(b': ', str(sig.r).encode())
io.sendlineafter(b': ', str(sig.s).encode())

flag = io.readline().decode()
success(flag)

# io.interactive()
