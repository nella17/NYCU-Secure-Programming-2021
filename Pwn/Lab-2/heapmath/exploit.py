from pwn import remote
import re

HOST, PORT = 'edu-ctf.zoolab.org', 30208

def reset():
    global start
    start = 0
    global tcache
    tcache = {}
    for msz in range(0x20, 0x410+1, 0x10):
        tcache[msz] = ['NULL']
    global chks
    chks = {}

def malloc(sz):
    global start
    sz += 0x10 - 8
    if sz & 0xf:
        sz += 0x10 - (sz & 0xf)
    ptr = start
    start += sz
    return sz, ptr

io = remote(HOST, PORT)

# tcache chall
print(io.readline().decode().strip())
reset()
for i in range(7):
    line = io.readline().decode()
    n, sz = re.findall('char \*(.) = \(char \*\) malloc\((.+)\);', line)[0]
    msz, ptr = chks[n] = malloc(int(sz,16))
    print(n, sz, hex(msz), hex(ptr))
for i in range(7):
    line = io.readline().decode()
    n = re.findall('free\((.)\);', line)[0]
    msz, ptr = chks[n]
    print('free', n, hex(msz), hex(ptr))
    tcache[msz].insert(0, n)
print(io.readline().decode().strip())
# 0x20
print(io.readline().decode().strip())
r = ' --> '.join(tcache[0x20])
print(r)
# 0x30
print(io.readline().decode().strip())
io.readuntil(b'>')
r = ' --> '.join(tcache[0x30])
print(r)
io.sendline(r.encode())
assert 'Correct' in io.readline().decode()
# 0x40
print(io.readline().decode().strip())
r = ' --> '.join(tcache[0x40])
print(r)
io.sendline(r.encode())
assert 'Correct' in io.readline().decode()

# address chall
print(io.readline().decode().strip())
print(io.readline().decode().strip())
line = io.readline().decode()
n1,a1 = re.findall('assert\( (.) == (.+) \);', line)[0]
n2 = io.read(1).decode()
a2 = hex(int(a1,16) - chks[n1][1] + chks[n2][1])
print(n1, a1)
print(n2, a2)
io.readuntil(b'>')
io.sendline(a2.encode())
assert 'Correct' in io.readline().decode()

# index chall
print(io.readline().decode().strip())
print(io.readline().decode().strip())
reset()
for i in range(2):
    line = io.readline().decode()
    n, sz = re.findall('unsigned long \*(.) = \(unsigned long \*\) malloc\((.+)\);', line)[0]
    msz, ptr = chks[n] = malloc(int(sz,16))
    print(n, sz, hex(msz), hex(ptr))
line = io.readline().decode()
n1,i1 = re.findall('(.)\[(.+)\] = 0xdeadbeef;', line)[0]
i1 = int(i1)
print(n1, i1)
n2 = io.read(1).decode()
i2 = i1 + (chks[n1][1] - chks[n2][1]) // 8
print(n2, i2)
io.readuntil(b'>')
io.sendline(str(i2).encode())
assert 'Correct' in io.readline().decode()

# tcache fd chall
print(io.readline().decode().strip())
print(io.readline().decode().strip())
for i in range(2):
    line = io.readline().decode()
    n = re.findall('free\((.)\);', line)[0]
    msz, ptr = chks[n]
    print('free', n, hex(msz), hex(ptr))
    tcache[msz].insert(0, n)
line = io.readline().decode()
n1,a1 = re.findall('assert\( (.) == (.+) \);', line)[0]
addr = hex(int(a1,16) - chks[n1][0])
print(addr)
io.readuntil(b'>')
io.sendline(addr.encode())
assert 'Correct' in io.readline().decode()

# fastbin fd chall
print(io.readline().decode().strip())
print(io.readline().decode().strip())
reset()
print(io.readline().decode().strip())
for i in range(2):
    line = io.readline().decode()
    n, sz = re.findall('(.) = \(unsigned long \*\) malloc\((.+)\);', line)[0]
    msz, ptr = chks[n] = malloc(int(sz,16))
    print(n, sz, hex(msz), hex(ptr))
print(io.readline().decode().strip())
print(io.readline().decode().strip())
print(io.readline().decode().strip())
for i in range(2):
    line = io.readline().decode()
    n = re.findall('free\((.)\);', line)[0]
    msz, ptr = chks[n]
    print('free', n, hex(msz), hex(ptr))
    tcache[msz].insert(0, n)
line = io.readline().decode()
n1,a1 = re.findall('assert\( (.) == (.+) \);', line)[0]
addr = hex(int(a1,16) - chks[n1][0] - 0x10)
print(addr)
io.readuntil(b'>')
io.sendline(addr.encode())
assert 'Correct' in io.readline().decode()

io.interactive()

